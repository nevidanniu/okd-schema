{
  "description": "ClusterResourceQuota mirrors ResourceQuota at a cluster scope.  This object is easily convertible to synthetic ResourceQuota object to allow quota evaluation re-use.", 
  "required": [
    "metadata", 
    "spec"
  ], 
  "x-kubernetes-group-version-kind": [
    {
      "kind": "ClusterResourceQuota", 
      "version": "v1", 
      "group": "quota.openshift.io"
    }
  ], 
  "$schema": "http://json-schema.org/schema#", 
  "type": "object", 
  "properties": {
    "status": {
      "required": [
        "total"
      ], 
      "type": "object", 
      "description": "Status defines the actual enforced quota and its current usage", 
      "properties": {
        "total": {
          "type": "object", 
          "description": "Total defines the actual enforced quota and its current usage across all projects", 
          "properties": {
            "hard": {
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$", 
                "x-kubernetes-int-or-string": true
              }, 
              "type": "object", 
              "description": "Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/"
            }, 
            "used": {
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$", 
                "x-kubernetes-int-or-string": true
              }, 
              "type": "object", 
              "description": "Used is the current observed total usage of the resource in the namespace."
            }
          }
        }, 
        "namespaces": {
          "description": "Namespaces slices the usage by project.  This division allows for quick resolution of deletion reconciliation inside of a single project without requiring a recalculation across all projects.  This can be used to pull the deltas for a given project."
        }
      }
    }, 
    "kind": {
      "type": "string", 
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
    }, 
    "spec": {
      "required": [
        "quota", 
        "selector"
      ], 
      "type": "object", 
      "description": "Spec defines the desired quota", 
      "properties": {
        "quota": {
          "type": "object", 
          "description": "Quota defines the desired quota", 
          "properties": {
            "scopes": {
              "items": {
                "type": "string", 
                "description": "A ResourceQuotaScope defines a filter that must match each object tracked by a quota"
              }, 
              "type": "array", 
              "description": "A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects."
            }, 
            "hard": {
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$", 
                "x-kubernetes-int-or-string": true
              }, 
              "type": "object", 
              "description": "hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/"
            }, 
            "scopeSelector": {
              "type": "object", 
              "description": "scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.", 
              "properties": {
                "matchExpressions": {
                  "items": {
                    "required": [
                      "operator", 
                      "scopeName"
                    ], 
                    "type": "object", 
                    "description": "A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.", 
                    "properties": {
                      "operator": {
                        "type": "string", 
                        "description": "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist."
                      }, 
                      "values": {
                        "items": {
                          "type": "string"
                        }, 
                        "type": "array", 
                        "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                      }, 
                      "scopeName": {
                        "type": "string", 
                        "description": "The name of the scope that the selector applies to."
                      }
                    }
                  }, 
                  "type": "array", 
                  "description": "A list of scope selector requirements by scope of the resources."
                }
              }
            }
          }
        }, 
        "selector": {
          "type": "object", 
          "description": "Selector is the selector used to match projects. It should only select active projects on the scale of dozens (though it can select many more less active projects).  These projects will contend on object creation through this resource.", 
          "properties": {
            "labels": {
              "description": "LabelSelector is used to select projects by label."
            }, 
            "annotations": {
              "additionalProperties": {
                "type": "string"
              }, 
              "description": "AnnotationSelector is used to select projects by annotation."
            }
          }
        }
      }
    }, 
    "apiVersion": {
      "type": "string", 
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
    }, 
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta_v2"
    }
  }
}