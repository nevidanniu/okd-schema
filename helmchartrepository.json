{
  "description": "HelmChartRepository holds cluster-wide configuration for proxied Helm chart repository", 
  "required": [
    "spec"
  ], 
  "x-kubernetes-group-version-kind": [
    {
      "kind": "HelmChartRepository", 
      "version": "v1beta1", 
      "group": "helm.openshift.io"
    }
  ], 
  "$schema": "http://json-schema.org/schema#", 
  "type": "object", 
  "properties": {
    "status": {
      "type": "object", 
      "description": "Observed status of the repository within the cluster..", 
      "properties": {
        "conditions": {
          "items": {
            "required": [
              "lastTransitionTime", 
              "message", 
              "reason", 
              "status", 
              "type"
            ], 
            "type": "object", 
            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", 
            "properties": {
              "status": {
                "enum": [
                  "True", 
                  "False", 
                  "Unknown"
                ], 
                "type": "string", 
                "description": "status of the condition, one of True, False, Unknown."
              }, 
              "observedGeneration": {
                "minimum": 0, 
                "type": "integer", 
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", 
                "format": "int64"
              }, 
              "lastTransitionTime": {
                "type": "string", 
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", 
                "format": "date-time"
              }, 
              "reason": {
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", 
                "type": "string", 
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", 
                "minLength": 1, 
                "maxLength": 1024
              }, 
              "message": {
                "type": "string", 
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.", 
                "maxLength": 32768
              }, 
              "type": {
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", 
                "type": "string", 
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", 
                "maxLength": 316
              }
            }
          }, 
          "type": "array", 
          "description": "conditions is a list of conditions and their statuses"
        }
      }
    }, 
    "kind": {
      "type": "string", 
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
    }, 
    "spec": {
      "type": "object", 
      "description": "spec holds user settable values for configuration", 
      "properties": {
        "disabled": {
          "type": "boolean", 
          "description": "If set to true, disable the repo usage in the cluster"
        }, 
        "connectionConfig": {
          "type": "object", 
          "description": "Required configuration for connecting to the chart repo", 
          "properties": {
            "url": {
              "pattern": "^https?:\\/\\/", 
              "type": "string", 
              "description": "Chart repository URL", 
              "maxLength": 2048
            }, 
            "ca": {
              "required": [
                "name"
              ], 
              "type": "object", 
              "description": "ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key \"ca-bundle.crt\" is used to locate the data. If empty, the default system roots are used. The namespace for this config map is openshift-config.", 
              "properties": {
                "name": {
                  "type": "string", 
                  "description": "name is the metadata.name of the referenced config map"
                }
              }
            }, 
            "tlsClientConfig": {
              "required": [
                "name"
              ], 
              "type": "object", 
              "description": "tlsClientConfig is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate and private key to present when connecting to the server. The key \"tls.crt\" is used to locate the client certificate. The key \"tls.key\" is used to locate the private key. The namespace for this secret is openshift-config.", 
              "properties": {
                "name": {
                  "type": "string", 
                  "description": "name is the metadata.name of the referenced secret"
                }
              }
            }
          }
        }, 
        "description": {
          "minLength": 1, 
          "type": "string", 
          "description": "Optional human readable repository description, it can be used by UI for displaying purposes", 
          "maxLength": 2048
        }, 
        "name": {
          "minLength": 1, 
          "type": "string", 
          "description": "Optional associated human readable repository name, it can be used by UI for displaying purposes", 
          "maxLength": 100
        }
      }
    }, 
    "apiVersion": {
      "type": "string", 
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
    }, 
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta_v2"
    }
  }
}