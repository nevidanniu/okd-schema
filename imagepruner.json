{
  "description": "ImagePruner is the configuration object for an image registry pruner managed by the registry operator.", 
  "required": [
    "metadata", 
    "spec"
  ], 
  "x-kubernetes-group-version-kind": [
    {
      "kind": "ImagePruner", 
      "version": "v1", 
      "group": "imageregistry.operator.openshift.io"
    }
  ], 
  "$schema": "http://json-schema.org/schema#", 
  "type": "object", 
  "properties": {
    "status": {
      "type": "object", 
      "description": "ImagePrunerStatus reports image pruner operational status.", 
      "properties": {
        "observedGeneration": {
          "type": "integer", 
          "description": "observedGeneration is the last generation change that has been applied.", 
          "format": "int64"
        }, 
        "conditions": {
          "items": {
            "type": "object", 
            "description": "OperatorCondition is just the standard condition fields.", 
            "properties": {
              "status": {
                "type": "string"
              }, 
              "type": {
                "type": "string"
              }, 
              "message": {
                "type": "string"
              }, 
              "lastTransitionTime": {
                "type": "string", 
                "format": "date-time"
              }, 
              "reason": {
                "type": "string"
              }
            }
          }, 
          "type": "array", 
          "description": "conditions is a list of conditions and their status."
        }
      }
    }, 
    "kind": {
      "type": "string", 
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
    }, 
    "spec": {
      "type": "object", 
      "description": "ImagePrunerSpec defines the specs for the running image pruner.", 
      "properties": {
        "failedJobsHistoryLimit": {
          "type": "integer", 
          "description": "failedJobsHistoryLimit specifies how many failed image pruner jobs to retain. Defaults to 3 if not set.", 
          "format": "int32"
        }, 
        "suspend": {
          "type": "boolean", 
          "description": "suspend specifies whether or not to suspend subsequent executions of this cronjob. Defaults to false."
        }, 
        "keepYoungerThanDuration": {
          "type": "string", 
          "description": "keepYoungerThanDuration specifies the minimum age of an image and its referrers for it to be considered a candidate for pruning. Defaults to 60m (60 minutes).", 
          "format": "duration"
        }, 
        "schedule": {
          "type": "string", 
          "description": "schedule specifies when to execute the job using standard cronjob syntax: https://wikipedia.org/wiki/Cron. Defaults to `0 0 * * *`."
        }, 
        "logLevel": {
          "enum": [
            "", 
            "Normal", 
            "Debug", 
            "Trace", 
            "TraceAll"
          ], 
          "type": "string", 
          "description": "logLevel sets the level of log output for the pruner job. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\"."
        }, 
        "successfulJobsHistoryLimit": {
          "type": "integer", 
          "description": "successfulJobsHistoryLimit specifies how many successful image pruner jobs to retain. Defaults to 3 if not set.", 
          "format": "int32"
        }, 
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "nodeSelector defines the node selection constraints for the image pruner pod."
        }, 
        "keepYoungerThan": {
          "type": "integer", 
          "description": "keepYoungerThan specifies the minimum age in nanoseconds of an image and its referrers for it to be considered a candidate for pruning. DEPRECATED: This field is deprecated in favor of keepYoungerThanDuration. If both are set, this field is ignored and keepYoungerThanDuration takes precedence.", 
          "format": "int64"
        }, 
        "ignoreInvalidImageReferences": {
          "type": "boolean", 
          "description": "ignoreInvalidImageReferences indicates whether the pruner can ignore errors while parsing image references."
        }, 
        "keepTagRevisions": {
          "type": "integer", 
          "description": "keepTagRevisions specifies the number of image revisions for a tag in an image stream that will be preserved. Defaults to 3."
        }, 
        "tolerations": {
          "items": {
            "type": "object", 
            "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.", 
            "properties": {
              "operator": {
                "type": "string", 
                "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category."
              }, 
              "value": {
                "type": "string", 
                "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."
              }, 
              "tolerationSeconds": {
                "type": "integer", 
                "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.", 
                "format": "int64"
              }, 
              "effect": {
                "type": "string", 
                "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."
              }, 
              "key": {
                "type": "string", 
                "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."
              }
            }
          }, 
          "type": "array", 
          "description": "tolerations defines the node tolerations for the image pruner pod."
        }, 
        "affinity": {
          "type": "object", 
          "description": "affinity is a group of node affinity scheduling rules for the image pruner pod.", 
          "properties": {
            "podAffinity": {
              "type": "object", 
              "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).", 
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "required": [
                      "topologyKey"
                    ], 
                    "type": "object", 
                    "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running", 
                    "properties": {
                      "labelSelector": {
                        "type": "object", 
                        "description": "A label query over a set of resources, in this case pods.", 
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": {
                              "type": "string"
                            }, 
                            "type": "object", 
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                          }, 
                          "matchExpressions": {
                            "items": {
                              "required": [
                                "key", 
                                "operator"
                              ], 
                              "type": "object", 
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                              "properties": {
                                "operator": {
                                  "type": "string", 
                                  "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                }, 
                                "values": {
                                  "items": {
                                    "type": "string"
                                  }, 
                                  "type": "array", 
                                  "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                }, 
                                "key": {
                                  "type": "string", 
                                  "description": "key is the label key that the selector applies to."
                                }
                              }
                            }, 
                            "type": "array", 
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                          }
                        }
                      }, 
                      "namespaces": {
                        "items": {
                          "type": "string"
                        }, 
                        "type": "array", 
                        "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                      }, 
                      "topologyKey": {
                        "type": "string", 
                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                      }
                    }
                  }, 
                  "type": "array", 
                  "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
                }, 
                "preferredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "required": [
                      "podAffinityTerm", 
                      "weight"
                    ], 
                    "type": "object", 
                    "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)", 
                    "properties": {
                      "podAffinityTerm": {
                        "required": [
                          "topologyKey"
                        ], 
                        "type": "object", 
                        "description": "Required. A pod affinity term, associated with the corresponding weight.", 
                        "properties": {
                          "labelSelector": {
                            "type": "object", 
                            "description": "A label query over a set of resources, in this case pods.", 
                            "properties": {
                              "matchLabels": {
                                "additionalProperties": {
                                  "type": "string"
                                }, 
                                "type": "object", 
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                              }, 
                              "matchExpressions": {
                                "items": {
                                  "required": [
                                    "key", 
                                    "operator"
                                  ], 
                                  "type": "object", 
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                                  "properties": {
                                    "operator": {
                                      "type": "string", 
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                    }, 
                                    "values": {
                                      "items": {
                                        "type": "string"
                                      }, 
                                      "type": "array", 
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                    }, 
                                    "key": {
                                      "type": "string", 
                                      "description": "key is the label key that the selector applies to."
                                    }
                                  }
                                }, 
                                "type": "array", 
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                              }
                            }
                          }, 
                          "namespaces": {
                            "items": {
                              "type": "string"
                            }, 
                            "type": "array", 
                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                          }, 
                          "topologyKey": {
                            "type": "string", 
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                          }
                        }
                      }, 
                      "weight": {
                        "type": "integer", 
                        "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.", 
                        "format": "int32"
                      }
                    }
                  }, 
                  "type": "array", 
                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
                }
              }
            }, 
            "nodeAffinity": {
              "type": "object", 
              "description": "Describes node affinity scheduling rules for the pod.", 
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "required": [
                    "nodeSelectorTerms"
                  ], 
                  "type": "object", 
                  "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.", 
                  "properties": {
                    "nodeSelectorTerms": {
                      "items": {
                        "type": "object", 
                        "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.", 
                        "properties": {
                          "matchFields": {
                            "items": {
                              "required": [
                                "key", 
                                "operator"
                              ], 
                              "type": "object", 
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                              "properties": {
                                "operator": {
                                  "type": "string", 
                                  "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                }, 
                                "values": {
                                  "items": {
                                    "type": "string"
                                  }, 
                                  "type": "array", 
                                  "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                }, 
                                "key": {
                                  "type": "string", 
                                  "description": "The label key that the selector applies to."
                                }
                              }
                            }, 
                            "type": "array", 
                            "description": "A list of node selector requirements by node's fields."
                          }, 
                          "matchExpressions": {
                            "items": {
                              "required": [
                                "key", 
                                "operator"
                              ], 
                              "type": "object", 
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                              "properties": {
                                "operator": {
                                  "type": "string", 
                                  "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                }, 
                                "values": {
                                  "items": {
                                    "type": "string"
                                  }, 
                                  "type": "array", 
                                  "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                }, 
                                "key": {
                                  "type": "string", 
                                  "description": "The label key that the selector applies to."
                                }
                              }
                            }, 
                            "type": "array", 
                            "description": "A list of node selector requirements by node's labels."
                          }
                        }
                      }, 
                      "type": "array", 
                      "description": "Required. A list of node selector terms. The terms are ORed."
                    }
                  }
                }, 
                "preferredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "required": [
                      "preference", 
                      "weight"
                    ], 
                    "type": "object", 
                    "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).", 
                    "properties": {
                      "preference": {
                        "type": "object", 
                        "description": "A node selector term, associated with the corresponding weight.", 
                        "properties": {
                          "matchFields": {
                            "items": {
                              "required": [
                                "key", 
                                "operator"
                              ], 
                              "type": "object", 
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                              "properties": {
                                "operator": {
                                  "type": "string", 
                                  "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                }, 
                                "values": {
                                  "items": {
                                    "type": "string"
                                  }, 
                                  "type": "array", 
                                  "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                }, 
                                "key": {
                                  "type": "string", 
                                  "description": "The label key that the selector applies to."
                                }
                              }
                            }, 
                            "type": "array", 
                            "description": "A list of node selector requirements by node's fields."
                          }, 
                          "matchExpressions": {
                            "items": {
                              "required": [
                                "key", 
                                "operator"
                              ], 
                              "type": "object", 
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                              "properties": {
                                "operator": {
                                  "type": "string", 
                                  "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                }, 
                                "values": {
                                  "items": {
                                    "type": "string"
                                  }, 
                                  "type": "array", 
                                  "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                }, 
                                "key": {
                                  "type": "string", 
                                  "description": "The label key that the selector applies to."
                                }
                              }
                            }, 
                            "type": "array", 
                            "description": "A list of node selector requirements by node's labels."
                          }
                        }
                      }, 
                      "weight": {
                        "type": "integer", 
                        "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.", 
                        "format": "int32"
                      }
                    }
                  }, 
                  "type": "array", 
                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred."
                }
              }
            }, 
            "podAntiAffinity": {
              "type": "object", 
              "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).", 
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "required": [
                      "topologyKey"
                    ], 
                    "type": "object", 
                    "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running", 
                    "properties": {
                      "labelSelector": {
                        "type": "object", 
                        "description": "A label query over a set of resources, in this case pods.", 
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": {
                              "type": "string"
                            }, 
                            "type": "object", 
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                          }, 
                          "matchExpressions": {
                            "items": {
                              "required": [
                                "key", 
                                "operator"
                              ], 
                              "type": "object", 
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                              "properties": {
                                "operator": {
                                  "type": "string", 
                                  "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                }, 
                                "values": {
                                  "items": {
                                    "type": "string"
                                  }, 
                                  "type": "array", 
                                  "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                }, 
                                "key": {
                                  "type": "string", 
                                  "description": "key is the label key that the selector applies to."
                                }
                              }
                            }, 
                            "type": "array", 
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                          }
                        }
                      }, 
                      "namespaces": {
                        "items": {
                          "type": "string"
                        }, 
                        "type": "array", 
                        "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                      }, 
                      "topologyKey": {
                        "type": "string", 
                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                      }
                    }
                  }, 
                  "type": "array", 
                  "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
                }, 
                "preferredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "required": [
                      "podAffinityTerm", 
                      "weight"
                    ], 
                    "type": "object", 
                    "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)", 
                    "properties": {
                      "podAffinityTerm": {
                        "required": [
                          "topologyKey"
                        ], 
                        "type": "object", 
                        "description": "Required. A pod affinity term, associated with the corresponding weight.", 
                        "properties": {
                          "labelSelector": {
                            "type": "object", 
                            "description": "A label query over a set of resources, in this case pods.", 
                            "properties": {
                              "matchLabels": {
                                "additionalProperties": {
                                  "type": "string"
                                }, 
                                "type": "object", 
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                              }, 
                              "matchExpressions": {
                                "items": {
                                  "required": [
                                    "key", 
                                    "operator"
                                  ], 
                                  "type": "object", 
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                                  "properties": {
                                    "operator": {
                                      "type": "string", 
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                    }, 
                                    "values": {
                                      "items": {
                                        "type": "string"
                                      }, 
                                      "type": "array", 
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                    }, 
                                    "key": {
                                      "type": "string", 
                                      "description": "key is the label key that the selector applies to."
                                    }
                                  }
                                }, 
                                "type": "array", 
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                              }
                            }
                          }, 
                          "namespaces": {
                            "items": {
                              "type": "string"
                            }, 
                            "type": "array", 
                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                          }, 
                          "topologyKey": {
                            "type": "string", 
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                          }
                        }
                      }, 
                      "weight": {
                        "type": "integer", 
                        "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.", 
                        "format": "int32"
                      }
                    }
                  }, 
                  "type": "array", 
                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
                }
              }
            }
          }
        }, 
        "resources": {
          "type": "object", 
          "description": "resources defines the resource requests and limits for the image pruner pod.", 
          "properties": {
            "requests": {
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$", 
                "x-kubernetes-int-or-string": true
              }, 
              "type": "object", 
              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
            }, 
            "limits": {
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$", 
                "x-kubernetes-int-or-string": true
              }, 
              "type": "object", 
              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
            }
          }
        }
      }
    }, 
    "apiVersion": {
      "type": "string", 
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
    }, 
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta_v2"
    }
  }
}