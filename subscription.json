{
  "description": "Subscription keeps operators up to date by tracking changes to Catalogs.", 
  "required": [
    "metadata", 
    "spec"
  ], 
  "x-kubernetes-group-version-kind": [
    {
      "kind": "Subscription", 
      "version": "v1alpha1", 
      "group": "operators.coreos.com"
    }
  ], 
  "$schema": "http://json-schema.org/schema#", 
  "type": "object", 
  "properties": {
    "status": {
      "required": [
        "lastUpdated"
      ], 
      "type": "object", 
      "properties": {
        "installPlanRef": {
          "type": "object", 
          "description": "InstallPlanRef is a reference to the latest InstallPlan that contains the Subscription's current CSV.", 
          "properties": {
            "kind": {
              "type": "string", 
              "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
            }, 
            "name": {
              "type": "string", 
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
            }, 
            "namespace": {
              "type": "string", 
              "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
            }, 
            "apiVersion": {
              "type": "string", 
              "description": "API version of the referent."
            }, 
            "fieldPath": {
              "type": "string", 
              "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future."
            }, 
            "resourceVersion": {
              "type": "string", 
              "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
            }, 
            "uid": {
              "type": "string", 
              "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
            }
          }
        }, 
        "state": {
          "type": "string", 
          "description": "State represents the current state of the Subscription"
        }, 
        "catalogHealth": {
          "items": {
            "required": [
              "catalogSourceRef", 
              "healthy", 
              "lastUpdated"
            ], 
            "type": "object", 
            "description": "SubscriptionCatalogHealth describes the health of a CatalogSource the Subscription knows about.", 
            "properties": {
              "healthy": {
                "type": "boolean", 
                "description": "Healthy is true if the CatalogSource is healthy; false otherwise."
              }, 
              "catalogSourceRef": {
                "type": "object", 
                "description": "CatalogSourceRef is a reference to a CatalogSource.", 
                "properties": {
                  "kind": {
                    "type": "string", 
                    "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                  }, 
                  "name": {
                    "type": "string", 
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                  }, 
                  "namespace": {
                    "type": "string", 
                    "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
                  }, 
                  "apiVersion": {
                    "type": "string", 
                    "description": "API version of the referent."
                  }, 
                  "fieldPath": {
                    "type": "string", 
                    "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future."
                  }, 
                  "resourceVersion": {
                    "type": "string", 
                    "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
                  }, 
                  "uid": {
                    "type": "string", 
                    "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
                  }
                }
              }, 
              "lastUpdated": {
                "type": "string", 
                "description": "LastUpdated represents the last time that the CatalogSourceHealth changed", 
                "format": "date-time"
              }
            }
          }, 
          "type": "array", 
          "description": "CatalogHealth contains the Subscription's view of its relevant CatalogSources' status. It is used to determine SubscriptionStatusConditions related to CatalogSources."
        }, 
        "installplan": {
          "required": [
            "apiVersion", 
            "kind", 
            "name", 
            "uuid"
          ], 
          "type": "object", 
          "description": "Install is a reference to the latest InstallPlan generated for the Subscription. DEPRECATED: InstallPlanRef", 
          "properties": {
            "kind": {
              "type": "string"
            }, 
            "name": {
              "type": "string"
            }, 
            "apiVersion": {
              "type": "string"
            }, 
            "uuid": {
              "type": "string", 
              "description": "UID is a type that holds unique ID values, including UUIDs.  Because we don't ONLY use UUIDs, this is an alias to string.  Being a type captures intent and helps make sure that UIDs and names do not get conflated."
            }
          }
        }, 
        "reason": {
          "type": "string", 
          "description": "Reason is the reason the Subscription was transitioned to its current state."
        }, 
        "lastUpdated": {
          "type": "string", 
          "description": "LastUpdated represents the last time that the Subscription status was updated.", 
          "format": "date-time"
        }, 
        "installedCSV": {
          "type": "string", 
          "description": "InstalledCSV is the CSV currently installed by the Subscription."
        }, 
        "installPlanGeneration": {
          "type": "integer", 
          "description": "InstallPlanGeneration is the current generation of the installplan"
        }, 
        "conditions": {
          "items": {
            "required": [
              "status", 
              "type"
            ], 
            "type": "object", 
            "description": "SubscriptionCondition represents the latest available observations of a Subscription's state.", 
            "properties": {
              "status": {
                "type": "string", 
                "description": "Status is the status of the condition, one of True, False, Unknown."
              }, 
              "lastTransitionTime": {
                "type": "string", 
                "description": "LastTransitionTime is the last time the condition transit from one status to another", 
                "format": "date-time"
              }, 
              "reason": {
                "type": "string", 
                "description": "Reason is a one-word CamelCase reason for the condition's last transition."
              }, 
              "lastHeartbeatTime": {
                "type": "string", 
                "description": "LastHeartbeatTime is the last time we got an update on a given condition", 
                "format": "date-time"
              }, 
              "message": {
                "type": "string", 
                "description": "Message is a human-readable message indicating details about last transition."
              }, 
              "type": {
                "type": "string", 
                "description": "Type is the type of Subscription condition."
              }
            }
          }, 
          "type": "array", 
          "description": "Conditions is a list of the latest available observations about a Subscription's current state."
        }, 
        "currentCSV": {
          "type": "string", 
          "description": "CurrentCSV is the CSV the Subscription is progressing to."
        }
      }
    }, 
    "kind": {
      "type": "string", 
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
    }, 
    "spec": {
      "required": [
        "name", 
        "source", 
        "sourceNamespace"
      ], 
      "type": "object", 
      "description": "SubscriptionSpec defines an Application that can be installed", 
      "properties": {
        "name": {
          "type": "string"
        }, 
        "source": {
          "type": "string"
        }, 
        "installPlanApproval": {
          "type": "string", 
          "description": "Approval is the user approval policy for an InstallPlan. It must be one of \"Automatic\" or \"Manual\"."
        }, 
        "startingCSV": {
          "type": "string"
        }, 
        "config": {
          "type": "object", 
          "description": "SubscriptionConfig contains configuration specified for a subscription.", 
          "properties": {
            "env": {
              "items": {
                "required": [
                  "name"
                ], 
                "type": "object", 
                "description": "EnvVar represents an environment variable present in a Container.", 
                "properties": {
                  "valueFrom": {
                    "type": "object", 
                    "description": "Source for the environment variable's value. Cannot be used if value is not empty.", 
                    "properties": {
                      "secretKeyRef": {
                        "required": [
                          "key"
                        ], 
                        "type": "object", 
                        "description": "Selects a key of a secret in the pod's namespace", 
                        "properties": {
                          "optional": {
                            "type": "boolean", 
                            "description": "Specify whether the Secret or its key must be defined"
                          }, 
                          "name": {
                            "type": "string", 
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                          }, 
                          "key": {
                            "type": "string", 
                            "description": "The key of the secret to select from.  Must be a valid secret key."
                          }
                        }
                      }, 
                      "fieldRef": {
                        "required": [
                          "fieldPath"
                        ], 
                        "type": "object", 
                        "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.", 
                        "properties": {
                          "fieldPath": {
                            "type": "string", 
                            "description": "Path of the field to select in the specified API version."
                          }, 
                          "apiVersion": {
                            "type": "string", 
                            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
                          }
                        }
                      }, 
                      "resourceFieldRef": {
                        "required": [
                          "resource"
                        ], 
                        "type": "object", 
                        "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.", 
                        "properties": {
                          "containerName": {
                            "type": "string", 
                            "description": "Container name: required for volumes, optional for env vars"
                          }, 
                          "resource": {
                            "type": "string", 
                            "description": "Required: resource to select"
                          }, 
                          "divisor": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$", 
                            "description": "Specifies the output format of the exposed resources, defaults to \"1\"", 
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      }, 
                      "configMapKeyRef": {
                        "required": [
                          "key"
                        ], 
                        "type": "object", 
                        "description": "Selects a key of a ConfigMap.", 
                        "properties": {
                          "optional": {
                            "type": "boolean", 
                            "description": "Specify whether the ConfigMap or its key must be defined"
                          }, 
                          "name": {
                            "type": "string", 
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                          }, 
                          "key": {
                            "type": "string", 
                            "description": "The key to select."
                          }
                        }
                      }
                    }
                  }, 
                  "name": {
                    "type": "string", 
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER."
                  }, 
                  "value": {
                    "type": "string", 
                    "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
                  }
                }
              }, 
              "type": "array", 
              "description": "Env is a list of environment variables to set in the container. Cannot be updated."
            }, 
            "envFrom": {
              "items": {
                "type": "object", 
                "description": "EnvFromSource represents the source of a set of ConfigMaps", 
                "properties": {
                  "prefix": {
                    "type": "string", 
                    "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
                  }, 
                  "configMapRef": {
                    "type": "object", 
                    "description": "The ConfigMap to select from", 
                    "properties": {
                      "optional": {
                        "type": "boolean", 
                        "description": "Specify whether the ConfigMap must be defined"
                      }, 
                      "name": {
                        "type": "string", 
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                      }
                    }
                  }, 
                  "secretRef": {
                    "type": "object", 
                    "description": "The Secret to select from", 
                    "properties": {
                      "optional": {
                        "type": "boolean", 
                        "description": "Specify whether the Secret must be defined"
                      }, 
                      "name": {
                        "type": "string", 
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                      }
                    }
                  }
                }
              }, 
              "type": "array", 
              "description": "EnvFrom is a list of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Immutable."
            }, 
            "volumeMounts": {
              "items": {
                "required": [
                  "mountPath", 
                  "name"
                ], 
                "type": "object", 
                "description": "VolumeMount describes a mounting of a Volume within a container.", 
                "properties": {
                  "mountPath": {
                    "type": "string", 
                    "description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
                  }, 
                  "name": {
                    "type": "string", 
                    "description": "This must match the Name of a Volume."
                  }, 
                  "subPath": {
                    "type": "string", 
                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
                  }, 
                  "readOnly": {
                    "type": "boolean", 
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
                  }, 
                  "mountPropagation": {
                    "type": "string", 
                    "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10."
                  }, 
                  "subPathExpr": {
                    "type": "string", 
                    "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive."
                  }
                }
              }, 
              "type": "array", 
              "description": "List of VolumeMounts to set in the container."
            }, 
            "selector": {
              "type": "object", 
              "description": "Selector is the label selector for pods to be configured. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.", 
              "properties": {
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  }, 
                  "type": "object", 
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                }, 
                "matchExpressions": {
                  "items": {
                    "required": [
                      "key", 
                      "operator"
                    ], 
                    "type": "object", 
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                    "properties": {
                      "operator": {
                        "type": "string", 
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                      }, 
                      "values": {
                        "items": {
                          "type": "string"
                        }, 
                        "type": "array", 
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key is the label key that the selector applies to."
                      }
                    }
                  }, 
                  "type": "array", 
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                }
              }
            }, 
            "volumes": {
              "items": {
                "required": [
                  "name"
                ], 
                "type": "object", 
                "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.", 
                "properties": {
                  "portworxVolume": {
                    "required": [
                      "volumeID"
                    ], 
                    "type": "object", 
                    "description": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine", 
                    "properties": {
                      "readOnly": {
                        "type": "boolean", 
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
                      }, 
                      "volumeID": {
                        "type": "string", 
                        "description": "VolumeID uniquely identifies a Portworx volume"
                      }, 
                      "fsType": {
                        "type": "string", 
                        "description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified."
                      }
                    }
                  }, 
                  "glusterfs": {
                    "required": [
                      "endpoints", 
                      "path"
                    ], 
                    "type": "object", 
                    "description": "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md", 
                    "properties": {
                      "path": {
                        "type": "string", 
                        "description": "Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
                      }, 
                      "readOnly": {
                        "type": "boolean", 
                        "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
                      }, 
                      "endpoints": {
                        "type": "string", 
                        "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
                      }
                    }
                  }, 
                  "gitRepo": {
                    "required": [
                      "repository"
                    ], 
                    "type": "object", 
                    "description": "GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.", 
                    "properties": {
                      "directory": {
                        "type": "string", 
                        "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name."
                      }, 
                      "repository": {
                        "type": "string", 
                        "description": "Repository URL"
                      }, 
                      "revision": {
                        "type": "string", 
                        "description": "Commit hash for the specified revision."
                      }
                    }
                  }, 
                  "flocker": {
                    "type": "object", 
                    "description": "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running", 
                    "properties": {
                      "datasetName": {
                        "type": "string", 
                        "description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated"
                      }, 
                      "datasetUUID": {
                        "type": "string", 
                        "description": "UUID of the dataset. This is unique identifier of a Flocker dataset"
                      }
                    }
                  }, 
                  "storageos": {
                    "type": "object", 
                    "description": "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.", 
                    "properties": {
                      "volumeName": {
                        "type": "string", 
                        "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace."
                      }, 
                      "readOnly": {
                        "type": "boolean", 
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
                      }, 
                      "volumeNamespace": {
                        "type": "string", 
                        "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created."
                      }, 
                      "secretRef": {
                        "type": "object", 
                        "description": "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.", 
                        "properties": {
                          "name": {
                            "type": "string", 
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                          }
                        }
                      }, 
                      "fsType": {
                        "type": "string", 
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
                      }
                    }
                  }, 
                  "csi": {
                    "required": [
                      "driver"
                    ], 
                    "type": "object", 
                    "description": "CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).", 
                    "properties": {
                      "nodePublishSecretRef": {
                        "type": "object", 
                        "description": "NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.", 
                        "properties": {
                          "name": {
                            "type": "string", 
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                          }
                        }
                      }, 
                      "readOnly": {
                        "type": "boolean", 
                        "description": "Specifies a read-only configuration for the volume. Defaults to false (read/write)."
                      }, 
                      "driver": {
                        "type": "string", 
                        "description": "Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster."
                      }, 
                      "volumeAttributes": {
                        "additionalProperties": {
                          "type": "string"
                        }, 
                        "type": "object", 
                        "description": "VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values."
                      }, 
                      "fsType": {
                        "type": "string", 
                        "description": "Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply."
                      }
                    }
                  }, 
                  "iscsi": {
                    "required": [
                      "iqn", 
                      "lun", 
                      "targetPortal"
                    ], 
                    "type": "object", 
                    "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md", 
                    "properties": {
                      "targetPortal": {
                        "type": "string", 
                        "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
                      }, 
                      "portals": {
                        "items": {
                          "type": "string"
                        }, 
                        "type": "array", 
                        "description": "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
                      }, 
                      "secretRef": {
                        "type": "object", 
                        "description": "CHAP Secret for iSCSI target and initiator authentication", 
                        "properties": {
                          "name": {
                            "type": "string", 
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                          }
                        }
                      }, 
                      "fsType": {
                        "type": "string", 
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine"
                      }, 
                      "readOnly": {
                        "type": "boolean", 
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false."
                      }, 
                      "chapAuthSession": {
                        "type": "boolean", 
                        "description": "whether support iSCSI Session CHAP authentication"
                      }, 
                      "initiatorName": {
                        "type": "string", 
                        "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection."
                      }, 
                      "iscsiInterface": {
                        "type": "string", 
                        "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp)."
                      }, 
                      "chapAuthDiscovery": {
                        "type": "boolean", 
                        "description": "whether support iSCSI Discovery CHAP authentication"
                      }, 
                      "iqn": {
                        "type": "string", 
                        "description": "Target iSCSI Qualified Name."
                      }, 
                      "lun": {
                        "type": "integer", 
                        "description": "iSCSI Target Lun number.", 
                        "format": "int32"
                      }
                    }
                  }, 
                  "ephemeral": {
                    "type": "object", 
                    "description": "Ephemeral represents a volume that is handled by a cluster storage driver (Alpha feature). The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. \n Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim). \n Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. \n Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. \n A pod can use both types of ephemeral volumes and persistent volumes at the same time.", 
                    "properties": {
                      "readOnly": {
                        "type": "boolean", 
                        "description": "Specifies a read-only configuration for the volume. Defaults to false (read/write)."
                      }, 
                      "volumeClaimTemplate": {
                        "required": [
                          "spec"
                        ], 
                        "type": "object", 
                        "description": "Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). \n An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. \n This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. \n Required, must not be nil.", 
                        "properties": {
                          "spec": {
                            "type": "object", 
                            "description": "The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.", 
                            "properties": {
                              "storageClassName": {
                                "type": "string", 
                                "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                              }, 
                              "volumeMode": {
                                "type": "string", 
                                "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec."
                              }, 
                              "selector": {
                                "type": "object", 
                                "description": "A label query over volumes to consider for binding.", 
                                "properties": {
                                  "matchLabels": {
                                    "additionalProperties": {
                                      "type": "string"
                                    }, 
                                    "type": "object", 
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                  }, 
                                  "matchExpressions": {
                                    "items": {
                                      "required": [
                                        "key", 
                                        "operator"
                                      ], 
                                      "type": "object", 
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                                      "properties": {
                                        "operator": {
                                          "type": "string", 
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                        }, 
                                        "values": {
                                          "items": {
                                            "type": "string"
                                          }, 
                                          "type": "array", 
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                        }, 
                                        "key": {
                                          "type": "string", 
                                          "description": "key is the label key that the selector applies to."
                                        }
                                      }
                                    }, 
                                    "type": "array", 
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                  }
                                }
                              }, 
                              "accessModes": {
                                "items": {
                                  "type": "string"
                                }, 
                                "type": "array", 
                                "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1"
                              }, 
                              "dataSource": {
                                "required": [
                                  "kind", 
                                  "name"
                                ], 
                                "type": "object", 
                                "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.", 
                                "properties": {
                                  "apiGroup": {
                                    "type": "string", 
                                    "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                  }, 
                                  "kind": {
                                    "type": "string", 
                                    "description": "Kind is the type of resource being referenced"
                                  }, 
                                  "name": {
                                    "type": "string", 
                                    "description": "Name is the name of resource being referenced"
                                  }
                                }
                              }, 
                              "volumeName": {
                                "type": "string", 
                                "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                              }, 
                              "resources": {
                                "type": "object", 
                                "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources", 
                                "properties": {
                                  "requests": {
                                    "additionalProperties": {
                                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$", 
                                      "x-kubernetes-int-or-string": true
                                    }, 
                                    "type": "object", 
                                    "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
                                  }, 
                                  "limits": {
                                    "additionalProperties": {
                                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$", 
                                      "x-kubernetes-int-or-string": true
                                    }, 
                                    "type": "object", 
                                    "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
                                  }
                                }
                              }
                            }
                          }, 
                          "metadata": {
                            "type": "object", 
                            "description": "May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation."
                          }
                        }
                      }
                    }
                  }, 
                  "projected": {
                    "type": "object", 
                    "description": "Items for all in one resources secrets, configmaps, and downward API", 
                    "properties": {
                      "sources": {
                        "items": {
                          "type": "object", 
                          "description": "Projection that may be projected along with other supported volume types", 
                          "properties": {
                            "configMap": {
                              "type": "object", 
                              "description": "information about the configMap data to project", 
                              "properties": {
                                "items": {
                                  "items": {
                                    "required": [
                                      "key", 
                                      "path"
                                    ], 
                                    "type": "object", 
                                    "description": "Maps a string key to a path within a volume.", 
                                    "properties": {
                                      "path": {
                                        "type": "string", 
                                        "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                                      }, 
                                      "mode": {
                                        "type": "integer", 
                                        "description": "Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                                        "format": "int32"
                                      }, 
                                      "key": {
                                        "type": "string", 
                                        "description": "The key to project."
                                      }
                                    }
                                  }, 
                                  "type": "array", 
                                  "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
                                }, 
                                "optional": {
                                  "type": "boolean", 
                                  "description": "Specify whether the ConfigMap or its keys must be defined"
                                }, 
                                "name": {
                                  "type": "string", 
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                                }
                              }
                            }, 
                            "secret": {
                              "type": "object", 
                              "description": "information about the secret data to project", 
                              "properties": {
                                "items": {
                                  "items": {
                                    "required": [
                                      "key", 
                                      "path"
                                    ], 
                                    "type": "object", 
                                    "description": "Maps a string key to a path within a volume.", 
                                    "properties": {
                                      "path": {
                                        "type": "string", 
                                        "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                                      }, 
                                      "mode": {
                                        "type": "integer", 
                                        "description": "Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                                        "format": "int32"
                                      }, 
                                      "key": {
                                        "type": "string", 
                                        "description": "The key to project."
                                      }
                                    }
                                  }, 
                                  "type": "array", 
                                  "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
                                }, 
                                "optional": {
                                  "type": "boolean", 
                                  "description": "Specify whether the Secret or its key must be defined"
                                }, 
                                "name": {
                                  "type": "string", 
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                                }
                              }
                            }, 
                            "serviceAccountToken": {
                              "required": [
                                "path"
                              ], 
                              "type": "object", 
                              "description": "information about the serviceAccountToken data to project", 
                              "properties": {
                                "path": {
                                  "type": "string", 
                                  "description": "Path is the path relative to the mount point of the file to project the token into."
                                }, 
                                "audience": {
                                  "type": "string", 
                                  "description": "Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver."
                                }, 
                                "expirationSeconds": {
                                  "type": "integer", 
                                  "description": "ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.", 
                                  "format": "int64"
                                }
                              }
                            }, 
                            "downwardAPI": {
                              "type": "object", 
                              "description": "information about the downwardAPI data to project", 
                              "properties": {
                                "items": {
                                  "items": {
                                    "required": [
                                      "path"
                                    ], 
                                    "type": "object", 
                                    "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field", 
                                    "properties": {
                                      "path": {
                                        "type": "string", 
                                        "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
                                      }, 
                                      "fieldRef": {
                                        "required": [
                                          "fieldPath"
                                        ], 
                                        "type": "object", 
                                        "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.", 
                                        "properties": {
                                          "fieldPath": {
                                            "type": "string", 
                                            "description": "Path of the field to select in the specified API version."
                                          }, 
                                          "apiVersion": {
                                            "type": "string", 
                                            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
                                          }
                                        }
                                      }, 
                                      "mode": {
                                        "type": "integer", 
                                        "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                                        "format": "int32"
                                      }, 
                                      "resourceFieldRef": {
                                        "required": [
                                          "resource"
                                        ], 
                                        "type": "object", 
                                        "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.", 
                                        "properties": {
                                          "containerName": {
                                            "type": "string", 
                                            "description": "Container name: required for volumes, optional for env vars"
                                          }, 
                                          "resource": {
                                            "type": "string", 
                                            "description": "Required: resource to select"
                                          }, 
                                          "divisor": {
                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$", 
                                            "description": "Specifies the output format of the exposed resources, defaults to \"1\"", 
                                            "x-kubernetes-int-or-string": true
                                          }
                                        }
                                      }
                                    }
                                  }, 
                                  "type": "array", 
                                  "description": "Items is a list of DownwardAPIVolume file"
                                }
                              }
                            }
                          }
                        }, 
                        "type": "array", 
                        "description": "list of volume projections"
                      }, 
                      "defaultMode": {
                        "type": "integer", 
                        "description": "Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                        "format": "int32"
                      }
                    }
                  }, 
                  "secret": {
                    "type": "object", 
                    "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret", 
                    "properties": {
                      "items": {
                        "items": {
                          "required": [
                            "key", 
                            "path"
                          ], 
                          "type": "object", 
                          "description": "Maps a string key to a path within a volume.", 
                          "properties": {
                            "path": {
                              "type": "string", 
                              "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                            }, 
                            "mode": {
                              "type": "integer", 
                              "description": "Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                              "format": "int32"
                            }, 
                            "key": {
                              "type": "string", 
                              "description": "The key to project."
                            }
                          }
                        }, 
                        "type": "array", 
                        "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
                      }, 
                      "optional": {
                        "type": "boolean", 
                        "description": "Specify whether the Secret or its keys must be defined"
                      }, 
                      "defaultMode": {
                        "type": "integer", 
                        "description": "Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                        "format": "int32"
                      }, 
                      "secretName": {
                        "type": "string", 
                        "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
                      }
                    }
                  }, 
                  "scaleIO": {
                    "required": [
                      "gateway", 
                      "secretRef", 
                      "system"
                    ], 
                    "type": "object", 
                    "description": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.", 
                    "properties": {
                      "storageMode": {
                        "type": "string", 
                        "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned."
                      }, 
                      "secretRef": {
                        "type": "object", 
                        "description": "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.", 
                        "properties": {
                          "name": {
                            "type": "string", 
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                          }
                        }
                      }, 
                      "protectionDomain": {
                        "type": "string", 
                        "description": "The name of the ScaleIO Protection Domain for the configured storage."
                      }, 
                      "volumeName": {
                        "type": "string", 
                        "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source."
                      }, 
                      "sslEnabled": {
                        "type": "boolean", 
                        "description": "Flag to enable/disable SSL communication with Gateway, default false"
                      }, 
                      "system": {
                        "type": "string", 
                        "description": "The name of the storage system as configured in ScaleIO."
                      }, 
                      "fsType": {
                        "type": "string", 
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\"."
                      }, 
                      "readOnly": {
                        "type": "boolean", 
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
                      }, 
                      "storagePool": {
                        "type": "string", 
                        "description": "The ScaleIO Storage Pool associated with the protection domain."
                      }, 
                      "gateway": {
                        "type": "string", 
                        "description": "The host address of the ScaleIO API Gateway."
                      }
                    }
                  }, 
                  "photonPersistentDisk": {
                    "required": [
                      "pdID"
                    ], 
                    "type": "object", 
                    "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine", 
                    "properties": {
                      "pdID": {
                        "type": "string", 
                        "description": "ID that identifies Photon Controller persistent disk"
                      }, 
                      "fsType": {
                        "type": "string", 
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
                      }
                    }
                  }, 
                  "azureDisk": {
                    "required": [
                      "diskName", 
                      "diskURI"
                    ], 
                    "type": "object", 
                    "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.", 
                    "properties": {
                      "diskName": {
                        "type": "string", 
                        "description": "The Name of the data disk in the blob storage"
                      }, 
                      "cachingMode": {
                        "type": "string", 
                        "description": "Host Caching mode: None, Read Only, Read Write."
                      }, 
                      "kind": {
                        "type": "string", 
                        "description": "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared"
                      }, 
                      "fsType": {
                        "type": "string", 
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
                      }, 
                      "diskURI": {
                        "type": "string", 
                        "description": "The URI the data disk in the blob storage"
                      }, 
                      "readOnly": {
                        "type": "boolean", 
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
                      }
                    }
                  }, 
                  "fc": {
                    "type": "object", 
                    "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.", 
                    "properties": {
                      "targetWWNs": {
                        "items": {
                          "type": "string"
                        }, 
                        "type": "array", 
                        "description": "Optional: FC target worldwide names (WWNs)"
                      }, 
                      "fsType": {
                        "type": "string", 
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine"
                      }, 
                      "readOnly": {
                        "type": "boolean", 
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
                      }, 
                      "lun": {
                        "type": "integer", 
                        "description": "Optional: FC target lun number", 
                        "format": "int32"
                      }, 
                      "wwids": {
                        "items": {
                          "type": "string"
                        }, 
                        "type": "array", 
                        "description": "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously."
                      }
                    }
                  }, 
                  "flexVolume": {
                    "required": [
                      "driver"
                    ], 
                    "type": "object", 
                    "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.", 
                    "properties": {
                      "secretRef": {
                        "type": "object", 
                        "description": "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.", 
                        "properties": {
                          "name": {
                            "type": "string", 
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                          }
                        }
                      }, 
                      "options": {
                        "additionalProperties": {
                          "type": "string"
                        }, 
                        "type": "object", 
                        "description": "Optional: Extra command options if any."
                      }, 
                      "driver": {
                        "type": "string", 
                        "description": "Driver is the name of the driver to use for this volume."
                      }, 
                      "readOnly": {
                        "type": "boolean", 
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
                      }, 
                      "fsType": {
                        "type": "string", 
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script."
                      }
                    }
                  }, 
                  "emptyDir": {
                    "type": "object", 
                    "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir", 
                    "properties": {
                      "sizeLimit": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$", 
                        "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir", 
                        "x-kubernetes-int-or-string": true
                      }, 
                      "medium": {
                        "type": "string", 
                        "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
                      }
                    }
                  }, 
                  "persistentVolumeClaim": {
                    "required": [
                      "claimName"
                    ], 
                    "type": "object", 
                    "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims", 
                    "properties": {
                      "readOnly": {
                        "type": "boolean", 
                        "description": "Will force the ReadOnly setting in VolumeMounts. Default false."
                      }, 
                      "claimName": {
                        "type": "string", 
                        "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
                      }
                    }
                  }, 
                  "configMap": {
                    "type": "object", 
                    "description": "ConfigMap represents a configMap that should populate this volume", 
                    "properties": {
                      "items": {
                        "items": {
                          "required": [
                            "key", 
                            "path"
                          ], 
                          "type": "object", 
                          "description": "Maps a string key to a path within a volume.", 
                          "properties": {
                            "path": {
                              "type": "string", 
                              "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                            }, 
                            "mode": {
                              "type": "integer", 
                              "description": "Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                              "format": "int32"
                            }, 
                            "key": {
                              "type": "string", 
                              "description": "The key to project."
                            }
                          }
                        }, 
                        "type": "array", 
                        "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
                      }, 
                      "optional": {
                        "type": "boolean", 
                        "description": "Specify whether the ConfigMap or its keys must be defined"
                      }, 
                      "defaultMode": {
                        "type": "integer", 
                        "description": "Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                        "format": "int32"
                      }, 
                      "name": {
                        "type": "string", 
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                      }
                    }
                  }, 
                  "rbd": {
                    "required": [
                      "image", 
                      "monitors"
                    ], 
                    "type": "object", 
                    "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md", 
                    "properties": {
                      "secretRef": {
                        "type": "object", 
                        "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it", 
                        "properties": {
                          "name": {
                            "type": "string", 
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                          }
                        }
                      }, 
                      "image": {
                        "type": "string", 
                        "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
                      }, 
                      "keyring": {
                        "type": "string", 
                        "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
                      }, 
                      "fsType": {
                        "type": "string", 
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine"
                      }, 
                      "readOnly": {
                        "type": "boolean", 
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
                      }, 
                      "user": {
                        "type": "string", 
                        "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
                      }, 
                      "monitors": {
                        "items": {
                          "type": "string"
                        }, 
                        "type": "array", 
                        "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
                      }, 
                      "pool": {
                        "type": "string", 
                        "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
                      }
                    }
                  }, 
                  "name": {
                    "type": "string", 
                    "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                  }, 
                  "azureFile": {
                    "required": [
                      "secretName", 
                      "shareName"
                    ], 
                    "type": "object", 
                    "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.", 
                    "properties": {
                      "shareName": {
                        "type": "string", 
                        "description": "Share Name"
                      }, 
                      "readOnly": {
                        "type": "boolean", 
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
                      }, 
                      "secretName": {
                        "type": "string", 
                        "description": "the name of secret that contains Azure Storage Account Name and Key"
                      }
                    }
                  }, 
                  "quobyte": {
                    "required": [
                      "registry", 
                      "volume"
                    ], 
                    "type": "object", 
                    "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime", 
                    "properties": {
                      "group": {
                        "type": "string", 
                        "description": "Group to map volume access to Default is no group"
                      }, 
                      "volume": {
                        "type": "string", 
                        "description": "Volume is a string that references an already created Quobyte volume by name."
                      }, 
                      "readOnly": {
                        "type": "boolean", 
                        "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false."
                      }, 
                      "registry": {
                        "type": "string", 
                        "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes"
                      }, 
                      "tenant": {
                        "type": "string", 
                        "description": "Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin"
                      }, 
                      "user": {
                        "type": "string", 
                        "description": "User to map volume access to Defaults to serivceaccount user"
                      }
                    }
                  }, 
                  "hostPath": {
                    "required": [
                      "path"
                    ], 
                    "type": "object", 
                    "description": "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.", 
                    "properties": {
                      "path": {
                        "type": "string", 
                        "description": "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
                      }, 
                      "type": {
                        "type": "string", 
                        "description": "Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
                      }
                    }
                  }, 
                  "nfs": {
                    "required": [
                      "path", 
                      "server"
                    ], 
                    "type": "object", 
                    "description": "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs", 
                    "properties": {
                      "path": {
                        "type": "string", 
                        "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
                      }, 
                      "readOnly": {
                        "type": "boolean", 
                        "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
                      }, 
                      "server": {
                        "type": "string", 
                        "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
                      }
                    }
                  }, 
                  "vsphereVolume": {
                    "required": [
                      "volumePath"
                    ], 
                    "type": "object", 
                    "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine", 
                    "properties": {
                      "storagePolicyName": {
                        "type": "string", 
                        "description": "Storage Policy Based Management (SPBM) profile name."
                      }, 
                      "volumePath": {
                        "type": "string", 
                        "description": "Path that identifies vSphere volume vmdk"
                      }, 
                      "storagePolicyID": {
                        "type": "string", 
                        "description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName."
                      }, 
                      "fsType": {
                        "type": "string", 
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
                      }
                    }
                  }, 
                  "cinder": {
                    "required": [
                      "volumeID"
                    ], 
                    "type": "object", 
                    "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md", 
                    "properties": {
                      "readOnly": {
                        "type": "boolean", 
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
                      }, 
                      "secretRef": {
                        "type": "object", 
                        "description": "Optional: points to a secret object containing parameters used to connect to OpenStack.", 
                        "properties": {
                          "name": {
                            "type": "string", 
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                          }
                        }
                      }, 
                      "volumeID": {
                        "type": "string", 
                        "description": "volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
                      }, 
                      "fsType": {
                        "type": "string", 
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
                      }
                    }
                  }, 
                  "awsElasticBlockStore": {
                    "required": [
                      "volumeID"
                    ], 
                    "type": "object", 
                    "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore", 
                    "properties": {
                      "readOnly": {
                        "type": "boolean", 
                        "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
                      }, 
                      "partition": {
                        "type": "integer", 
                        "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).", 
                        "format": "int32"
                      }, 
                      "volumeID": {
                        "type": "string", 
                        "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
                      }, 
                      "fsType": {
                        "type": "string", 
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine"
                      }
                    }
                  }, 
                  "cephfs": {
                    "required": [
                      "monitors"
                    ], 
                    "type": "object", 
                    "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime", 
                    "properties": {
                      "secretRef": {
                        "type": "object", 
                        "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it", 
                        "properties": {
                          "name": {
                            "type": "string", 
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                          }
                        }
                      }, 
                      "secretFile": {
                        "type": "string", 
                        "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
                      }, 
                      "readOnly": {
                        "type": "boolean", 
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
                      }, 
                      "user": {
                        "type": "string", 
                        "description": "Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
                      }, 
                      "path": {
                        "type": "string", 
                        "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /"
                      }, 
                      "monitors": {
                        "items": {
                          "type": "string"
                        }, 
                        "type": "array", 
                        "description": "Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
                      }
                    }
                  }, 
                  "downwardAPI": {
                    "type": "object", 
                    "description": "DownwardAPI represents downward API about the pod that should populate this volume", 
                    "properties": {
                      "items": {
                        "items": {
                          "required": [
                            "path"
                          ], 
                          "type": "object", 
                          "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field", 
                          "properties": {
                            "path": {
                              "type": "string", 
                              "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
                            }, 
                            "fieldRef": {
                              "required": [
                                "fieldPath"
                              ], 
                              "type": "object", 
                              "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.", 
                              "properties": {
                                "fieldPath": {
                                  "type": "string", 
                                  "description": "Path of the field to select in the specified API version."
                                }, 
                                "apiVersion": {
                                  "type": "string", 
                                  "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
                                }
                              }
                            }, 
                            "mode": {
                              "type": "integer", 
                              "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                              "format": "int32"
                            }, 
                            "resourceFieldRef": {
                              "required": [
                                "resource"
                              ], 
                              "type": "object", 
                              "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.", 
                              "properties": {
                                "containerName": {
                                  "type": "string", 
                                  "description": "Container name: required for volumes, optional for env vars"
                                }, 
                                "resource": {
                                  "type": "string", 
                                  "description": "Required: resource to select"
                                }, 
                                "divisor": {
                                  "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$", 
                                  "description": "Specifies the output format of the exposed resources, defaults to \"1\"", 
                                  "x-kubernetes-int-or-string": true
                                }
                              }
                            }
                          }
                        }, 
                        "type": "array", 
                        "description": "Items is a list of downward API volume file"
                      }, 
                      "defaultMode": {
                        "type": "integer", 
                        "description": "Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                        "format": "int32"
                      }
                    }
                  }, 
                  "gcePersistentDisk": {
                    "required": [
                      "pdName"
                    ], 
                    "type": "object", 
                    "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk", 
                    "properties": {
                      "readOnly": {
                        "type": "boolean", 
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
                      }, 
                      "partition": {
                        "type": "integer", 
                        "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk", 
                        "format": "int32"
                      }, 
                      "pdName": {
                        "type": "string", 
                        "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
                      }, 
                      "fsType": {
                        "type": "string", 
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine"
                      }
                    }
                  }
                }
              }, 
              "type": "array", 
              "description": "List of Volumes to set in the podSpec."
            }, 
            "tolerations": {
              "items": {
                "type": "object", 
                "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.", 
                "properties": {
                  "operator": {
                    "type": "string", 
                    "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category."
                  }, 
                  "value": {
                    "type": "string", 
                    "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."
                  }, 
                  "tolerationSeconds": {
                    "type": "integer", 
                    "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.", 
                    "format": "int64"
                  }, 
                  "effect": {
                    "type": "string", 
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."
                  }, 
                  "key": {
                    "type": "string", 
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."
                  }
                }
              }, 
              "type": "array", 
              "description": "Tolerations are the pod's tolerations."
            }, 
            "nodeSelector": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/"
            }, 
            "resources": {
              "type": "object", 
              "description": "Resources represents compute resources required by this container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/", 
              "properties": {
                "requests": {
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$", 
                    "x-kubernetes-int-or-string": true
                  }, 
                  "type": "object", 
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
                }, 
                "limits": {
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$", 
                    "x-kubernetes-int-or-string": true
                  }, 
                  "type": "object", 
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
                }
              }
            }
          }
        }, 
        "channel": {
          "type": "string"
        }, 
        "sourceNamespace": {
          "type": "string"
        }
      }
    }, 
    "apiVersion": {
      "type": "string", 
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
    }, 
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta_v2"
    }
  }
}