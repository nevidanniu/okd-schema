{
  "x-kubernetes-group-version-kind": [
    {
      "kind": "GroupSync", 
      "version": "v1alpha1", 
      "group": "redhatcop.redhat.io"
    }
  ], 
  "$schema": "http://json-schema.org/schema#", 
  "type": "object", 
  "description": "GroupSync is the Schema for the groupsyncs API", 
  "properties": {
    "status": {
      "type": "object", 
      "description": "GroupSyncStatus defines the observed state of GroupSync", 
      "properties": {
        "conditions": {
          "items": {
            "required": [
              "lastTransitionTime", 
              "message", 
              "reason", 
              "status", 
              "type"
            ], 
            "type": "object", 
            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }", 
            "properties": {
              "status": {
                "enum": [
                  "True", 
                  "False", 
                  "Unknown"
                ], 
                "type": "string", 
                "description": "status of the condition, one of True, False, Unknown."
              }, 
              "observedGeneration": {
                "minimum": 0, 
                "type": "integer", 
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", 
                "format": "int64"
              }, 
              "lastTransitionTime": {
                "type": "string", 
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", 
                "format": "date-time"
              }, 
              "reason": {
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$", 
                "type": "string", 
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.", 
                "minLength": 1, 
                "maxLength": 1024
              }, 
              "message": {
                "type": "string", 
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.", 
                "maxLength": 32768
              }, 
              "type": {
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$", 
                "type": "string", 
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)", 
                "maxLength": 316
              }
            }
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-list-map-keys": [
            "type"
          ]
        }, 
        "lastSyncSuccessTime": {
          "type": "string", 
          "description": "LastSyncSuccessTime represents the time last synchronization completed successfully", 
          "format": "date-time"
        }
      }
    }, 
    "kind": {
      "type": "string", 
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
    }, 
    "spec": {
      "type": "object", 
      "description": "GroupSyncSpec defines the desired state of GroupSync", 
      "properties": {
        "schedule": {
          "type": "string", 
          "description": "Schedule represents a cron based configuration for synchronization"
        }, 
        "providers": {
          "items": {
            "type": "object", 
            "description": "Provider represents the container for a single provider", 
            "properties": {
              "github": {
                "required": [
                  "credentialsSecret"
                ], 
                "type": "object", 
                "description": "GitHub represents the GitHub provider", 
                "properties": {
                  "url": {
                    "type": "string", 
                    "description": "URL is the location of the GitHub server"
                  }, 
                  "insecure": {
                    "type": "boolean", 
                    "description": "Insecure specifies whether to allow for unverified certificates to be used when communicating to GitHab"
                  }, 
                  "teams": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Teams represents a filtered list of teams to synchronize"
                  }, 
                  "caSecret": {
                    "required": [
                      "name", 
                      "namespace"
                    ], 
                    "type": "object", 
                    "description": "CaSecret is a reference to a secret containing a CA certificate to communicate to the GitHub server", 
                    "properties": {
                      "namespace": {
                        "type": "string", 
                        "description": "Namespace represents the namespace containing the secret"
                      }, 
                      "name": {
                        "type": "string", 
                        "description": "Name represents the name of the secret"
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "Key represents the specific key to reference from the secret"
                      }
                    }
                  }, 
                  "organization": {
                    "type": "string", 
                    "description": "Organization represents the location to source teams to synchronize"
                  }, 
                  "credentialsSecret": {
                    "required": [
                      "name", 
                      "namespace"
                    ], 
                    "type": "object", 
                    "description": "CredentialsSecret is a reference to a secret containing authentication details for the GitHub server", 
                    "properties": {
                      "namespace": {
                        "type": "string", 
                        "description": "Namespace represents the namespace containing the secret"
                      }, 
                      "name": {
                        "type": "string", 
                        "description": "Name represents the name of the secret"
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "Key represents the specific key to reference from the secret"
                      }
                    }
                  }
                }
              }, 
              "name": {
                "type": "string", 
                "description": "Name represents the name of the provider"
              }, 
              "gitlab": {
                "required": [
                  "credentialsSecret"
                ], 
                "type": "object", 
                "description": "GitLab represents the GitLab provider", 
                "properties": {
                  "url": {
                    "type": "string", 
                    "description": "URL is the location of the GitLub server"
                  }, 
                  "insecure": {
                    "type": "boolean", 
                    "description": "Insecure specifies whether to allow for unverified certificates to be used when communicating to GitLab"
                  }, 
                  "credentialsSecret": {
                    "required": [
                      "name", 
                      "namespace"
                    ], 
                    "type": "object", 
                    "description": "CredentialsSecret is a reference to a secret containing authentication details for the GitLab server", 
                    "properties": {
                      "namespace": {
                        "type": "string", 
                        "description": "Namespace represents the namespace containing the secret"
                      }, 
                      "name": {
                        "type": "string", 
                        "description": "Name represents the name of the secret"
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "Key represents the specific key to reference from the secret"
                      }
                    }
                  }, 
                  "caSecret": {
                    "required": [
                      "name", 
                      "namespace"
                    ], 
                    "type": "object", 
                    "description": "CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server", 
                    "properties": {
                      "namespace": {
                        "type": "string", 
                        "description": "Namespace represents the namespace containing the secret"
                      }, 
                      "name": {
                        "type": "string", 
                        "description": "Name represents the name of the secret"
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "Key represents the specific key to reference from the secret"
                      }
                    }
                  }, 
                  "groups": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Groups represents a filtered list of groups to synchronize"
                  }
                }
              }, 
              "okta": {
                "required": [
                  "appId", 
                  "credentialsSecret", 
                  "url"
                ], 
                "type": "object", 
                "description": "Okta represents the Okta provider", 
                "properties": {
                  "extractLoginUsername": {
                    "type": "boolean", 
                    "description": "ExtractLoginUsername is true if Okta username's are defaulted to emails and you would like the username only"
                  }, 
                  "url": {
                    "type": "string", 
                    "description": "URL is the location of the Okta domain server"
                  }, 
                  "profileKey": {
                    "type": "string", 
                    "description": "ProfileKey the attribute from Okta you would like to use as the user identifier.  Default is \"login\""
                  }, 
                  "groups": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Groups represents a filtered list of groups to synchronize"
                  }, 
                  "appId": {
                    "type": "string", 
                    "description": "AppId is the id of the application we are syncing groups for"
                  }, 
                  "credentialsSecret": {
                    "required": [
                      "name", 
                      "namespace"
                    ], 
                    "type": "object", 
                    "description": "CredentialsSecret is a reference to a secret containing authentication details for the Okta server", 
                    "properties": {
                      "namespace": {
                        "type": "string", 
                        "description": "Namespace represents the namespace containing the secret"
                      }, 
                      "name": {
                        "type": "string", 
                        "description": "Name represents the name of the secret"
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "Key represents the specific key to reference from the secret"
                      }
                    }
                  }
                }
              }, 
              "azure": {
                "required": [
                  "credentialsSecret"
                ], 
                "type": "object", 
                "description": "Azure represents the Azure provider", 
                "properties": {
                  "baseGroups": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "description": "BaseGroups allows for a set of groups to be specified to start searching from instead of searching all groups in the directory"
                  }, 
                  "url": {
                    "type": "string", 
                    "description": "URL is the location of the Azure platform"
                  }, 
                  "insecure": {
                    "type": "boolean", 
                    "description": "Insecure specifies whether to allow for unverified certificates to be used when communicating to Azure"
                  }, 
                  "filter": {
                    "type": "string", 
                    "description": "Filter allows for limiting the results from the groups response using the Filter feature of the Azure Graph API"
                  }, 
                  "groups": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Groups represents a filtered list of groups to synchronize"
                  }, 
                  "userNameAttributes": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "description": "UserNameAttributes are the fields to consider on the User object containing the username"
                  }, 
                  "credentialsSecret": {
                    "required": [
                      "name", 
                      "namespace"
                    ], 
                    "type": "object", 
                    "description": "CredentialsSecret is a reference to a secret containing authentication details for communicating to Azure", 
                    "properties": {
                      "namespace": {
                        "type": "string", 
                        "description": "Namespace represents the namespace containing the secret"
                      }, 
                      "name": {
                        "type": "string", 
                        "description": "Name represents the name of the secret"
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "Key represents the specific key to reference from the secret"
                      }
                    }
                  }
                }
              }, 
              "ldap": {
                "required": [
                  "url"
                ], 
                "type": "object", 
                "description": "Ldap represents the LDAP provider", 
                "properties": {
                  "rfc2307": {
                    "required": [
                      "groupMembershipAttributes", 
                      "groupNameAttributes", 
                      "groupUIDAttribute", 
                      "groupsQuery", 
                      "userNameAttributes", 
                      "userUIDAttribute", 
                      "usersQuery"
                    ], 
                    "type": "object", 
                    "description": "RFC2307Config represents the configuration for a RFC2307 schema", 
                    "properties": {
                      "usersQuery": {
                        "required": [
                          "baseDN"
                        ], 
                        "type": "object", 
                        "description": "AllUsersQuery holds the template for an LDAP query that returns user entries.", 
                        "properties": {
                          "derefAliases": {
                            "type": "string", 
                            "description": "The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set"
                          }, 
                          "pageSize": {
                            "type": "integer", 
                            "description": "PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done."
                          }, 
                          "baseDN": {
                            "type": "string", 
                            "description": "The DN of the branch of the directory where all searches should start from"
                          }, 
                          "filter": {
                            "type": "string", 
                            "description": "Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN"
                          }, 
                          "timeout": {
                            "type": "integer", 
                            "description": "TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed"
                          }, 
                          "scope": {
                            "type": "string", 
                            "description": "The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set"
                          }
                        }
                      }, 
                      "tolerateMemberNotFoundErrors": {
                        "type": "boolean", 
                        "description": "TolerateMemberNotFoundErrors determines the behavior of the LDAP sync job when missing user entries are encountered. If 'true', an LDAP query for users that doesn't find any will be tolerated and an only and error will be logged. If 'false', the LDAP sync job will fail if a query for users doesn't find any. The default value is 'false'. Misconfigured LDAP sync jobs with this flag set to 'true' can cause group membership to be removed, so it is recommended to use this flag with caution."
                      }, 
                      "groupsQuery": {
                        "required": [
                          "baseDN"
                        ], 
                        "type": "object", 
                        "description": "AllGroupsQuery holds the template for an LDAP query that returns group entries.", 
                        "properties": {
                          "derefAliases": {
                            "type": "string", 
                            "description": "The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set"
                          }, 
                          "pageSize": {
                            "type": "integer", 
                            "description": "PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done."
                          }, 
                          "baseDN": {
                            "type": "string", 
                            "description": "The DN of the branch of the directory where all searches should start from"
                          }, 
                          "filter": {
                            "type": "string", 
                            "description": "Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN"
                          }, 
                          "timeout": {
                            "type": "integer", 
                            "description": "TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed"
                          }, 
                          "scope": {
                            "type": "string", 
                            "description": "The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set"
                          }
                        }
                      }, 
                      "groupNameAttributes": {
                        "items": {
                          "type": "string"
                        }, 
                        "type": "array", 
                        "description": "GroupNameAttributes defines which attributes on an LDAP group entry will be interpreted as its name to use for an OpenShift group"
                      }, 
                      "groupMembershipAttributes": {
                        "items": {
                          "type": "string"
                        }, 
                        "type": "array", 
                        "description": "GroupMembershipAttributes defines which attributes on an LDAP group entry will be interpreted  as its members. The values contained in those attributes must be queryable by your UserUIDAttribute"
                      }, 
                      "tolerateMemberOutOfScopeErrors": {
                        "type": "boolean", 
                        "description": "TolerateMemberOutOfScopeErrors determines the behavior of the LDAP sync job when out-of-scope user entries are encountered. If 'true', an LDAP query for a user that falls outside of the base DN given for the all user query will be tolerated and only an error will be logged. If 'false', the LDAP sync job will fail if a user query would search outside of the base DN specified by the all user query. Misconfigured LDAP sync jobs with this flag set to 'true' can result in groups missing users, so it is recommended to use this flag with caution."
                      }, 
                      "groupUIDAttribute": {
                        "type": "string", 
                        "description": "GroupUIDAttributes defines which attribute on an LDAP group entry will be interpreted as its unique identifier. (ldapGroupUID)"
                      }, 
                      "userNameAttributes": {
                        "items": {
                          "type": "string"
                        }, 
                        "type": "array", 
                        "description": "UserNameAttributes defines which attributes on an LDAP user entry will be used, in order, as its OpenShift user name. The first attribute with a non-empty value is used. This should match your PreferredUsername setting for your LDAPPasswordIdentityProvider"
                      }, 
                      "userUIDAttribute": {
                        "type": "string", 
                        "description": "UserUIDAttribute defines which attribute on an LDAP user entry will be interpreted as its unique identifier. It must correspond to values that will be found from the GroupMembershipAttributes"
                      }
                    }
                  }, 
                  "url": {
                    "type": "string", 
                    "description": "URL is the location of the LDAP Server"
                  }, 
                  "insecure": {
                    "type": "boolean", 
                    "description": "Insecure specifies whether to allow for unverified certificates to be used when communicating to LDAP"
                  }, 
                  "activeDirectory": {
                    "required": [
                      "groupMembershipAttributes", 
                      "userNameAttributes", 
                      "usersQuery"
                    ], 
                    "type": "object", 
                    "description": "ActiveDirectoryConfig represents the configuration for Active Directory", 
                    "properties": {
                      "userNameAttributes": {
                        "items": {
                          "type": "string"
                        }, 
                        "type": "array", 
                        "description": "UserNameAttributes defines which attributes on an LDAP user entry will be interpreted as its OpenShift user name."
                      }, 
                      "groupMembershipAttributes": {
                        "items": {
                          "type": "string"
                        }, 
                        "type": "array", 
                        "description": "GroupMembershipAttributes defines which attributes on an LDAP user entry will be interpreted as the groups it is a member of"
                      }, 
                      "usersQuery": {
                        "required": [
                          "baseDN"
                        ], 
                        "type": "object", 
                        "description": "AllUsersQuery holds the template for an LDAP query that returns user entries.", 
                        "properties": {
                          "derefAliases": {
                            "type": "string", 
                            "description": "The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set"
                          }, 
                          "pageSize": {
                            "type": "integer", 
                            "description": "PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done."
                          }, 
                          "baseDN": {
                            "type": "string", 
                            "description": "The DN of the branch of the directory where all searches should start from"
                          }, 
                          "filter": {
                            "type": "string", 
                            "description": "Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN"
                          }, 
                          "timeout": {
                            "type": "integer", 
                            "description": "TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed"
                          }, 
                          "scope": {
                            "type": "string", 
                            "description": "The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set"
                          }
                        }
                      }
                    }
                  }, 
                  "groupUIDNameMapping": {
                    "additionalProperties": {
                      "type": "string"
                    }, 
                    "type": "object", 
                    "description": "/ LDAPGroupUIDToOpenShiftGroupNameMapping is an optional direct mapping of LDAP group UIDs to OpenShift group names"
                  }, 
                  "blacklist": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Blacklist represents a list of groups to not synchronize"
                  }, 
                  "whitelist": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Whitelist represents a list of groups to synchronize"
                  }, 
                  "caSecret": {
                    "required": [
                      "name", 
                      "namespace"
                    ], 
                    "type": "object", 
                    "description": "CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server", 
                    "properties": {
                      "namespace": {
                        "type": "string", 
                        "description": "Namespace represents the namespace containing the secret"
                      }, 
                      "name": {
                        "type": "string", 
                        "description": "Name represents the name of the secret"
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "Key represents the specific key to reference from the secret"
                      }
                    }
                  }, 
                  "credentialsSecret": {
                    "required": [
                      "name", 
                      "namespace"
                    ], 
                    "type": "object", 
                    "description": "CredentialsSecret is a reference to a secret containing authentication details for communicating to LDAP", 
                    "properties": {
                      "namespace": {
                        "type": "string", 
                        "description": "Namespace represents the namespace containing the secret"
                      }, 
                      "name": {
                        "type": "string", 
                        "description": "Name represents the name of the secret"
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "Key represents the specific key to reference from the secret"
                      }
                    }
                  }, 
                  "augmentedActiveDirectory": {
                    "required": [
                      "groupMembershipAttributes", 
                      "groupNameAttributes", 
                      "groupUIDAttribute", 
                      "groupsQuery", 
                      "userNameAttributes", 
                      "usersQuery"
                    ], 
                    "type": "object", 
                    "description": "ActiveDirectoryConfig represents the configuration for Augmented Active Directory", 
                    "properties": {
                      "usersQuery": {
                        "required": [
                          "baseDN"
                        ], 
                        "type": "object", 
                        "description": "AllUsersQuery holds the template for an LDAP query that returns user entries.", 
                        "properties": {
                          "derefAliases": {
                            "type": "string", 
                            "description": "The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set"
                          }, 
                          "pageSize": {
                            "type": "integer", 
                            "description": "PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done."
                          }, 
                          "baseDN": {
                            "type": "string", 
                            "description": "The DN of the branch of the directory where all searches should start from"
                          }, 
                          "filter": {
                            "type": "string", 
                            "description": "Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN"
                          }, 
                          "timeout": {
                            "type": "integer", 
                            "description": "TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed"
                          }, 
                          "scope": {
                            "type": "string", 
                            "description": "The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set"
                          }
                        }
                      }, 
                      "groupsQuery": {
                        "required": [
                          "baseDN"
                        ], 
                        "type": "object", 
                        "description": "AllGroupsQuery holds the template for an LDAP query that returns group entries.", 
                        "properties": {
                          "derefAliases": {
                            "type": "string", 
                            "description": "The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set"
                          }, 
                          "pageSize": {
                            "type": "integer", 
                            "description": "PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done."
                          }, 
                          "baseDN": {
                            "type": "string", 
                            "description": "The DN of the branch of the directory where all searches should start from"
                          }, 
                          "filter": {
                            "type": "string", 
                            "description": "Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN"
                          }, 
                          "timeout": {
                            "type": "integer", 
                            "description": "TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed"
                          }, 
                          "scope": {
                            "type": "string", 
                            "description": "The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set"
                          }
                        }
                      }, 
                      "groupNameAttributes": {
                        "items": {
                          "type": "string"
                        }, 
                        "type": "array", 
                        "description": "GroupNameAttributes defines which attributes on an LDAP group entry will be interpreted as its name to use for an OpenShift group"
                      }, 
                      "groupMembershipAttributes": {
                        "items": {
                          "type": "string"
                        }, 
                        "type": "array", 
                        "description": "GroupMembershipAttributes defines which attributes on an LDAP user entry will be interpreted as the groups it is a member of"
                      }, 
                      "groupUIDAttribute": {
                        "type": "string", 
                        "description": "GroupUIDAttributes defines which attribute on an LDAP group entry will be interpreted as its unique identifier. (ldapGroupUID)"
                      }, 
                      "userNameAttributes": {
                        "items": {
                          "type": "string"
                        }, 
                        "type": "array", 
                        "description": "UserNameAttributes defines which attributes on an LDAP user entry will be interpreted as its OpenShift user name."
                      }
                    }
                  }
                }
              }, 
              "keycloak": {
                "required": [
                  "credentialsSecret", 
                  "realm", 
                  "url"
                ], 
                "type": "object", 
                "description": "Keycloak represents the Keycloak provider", 
                "properties": {
                  "realm": {
                    "type": "string", 
                    "description": "Realm is the realm containing the groups to synchronize against"
                  }, 
                  "url": {
                    "type": "string", 
                    "description": "URL is the location of the Keycloak server"
                  }, 
                  "insecure": {
                    "type": "boolean", 
                    "description": "Insecure specifies whether to allow for unverified certificates to be used when communicating to Keycloak"
                  }, 
                  "loginRealm": {
                    "type": "string", 
                    "description": "LoginRealm is the Keycloak realm to authenticate against"
                  }, 
                  "caSecret": {
                    "required": [
                      "name", 
                      "namespace"
                    ], 
                    "type": "object", 
                    "description": "CaSecret is a reference to a secret containing a CA certificate to communicate to the Keycloak server", 
                    "properties": {
                      "namespace": {
                        "type": "string", 
                        "description": "Namespace represents the namespace containing the secret"
                      }, 
                      "name": {
                        "type": "string", 
                        "description": "Name represents the name of the secret"
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "Key represents the specific key to reference from the secret"
                      }
                    }
                  }, 
                  "groups": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Groups represents a filtered list of groups to synchronize"
                  }, 
                  "scope": {
                    "enum": [
                      "one", 
                      "sub"
                    ], 
                    "type": "string", 
                    "description": "Scope represents the depth for which groups will be synchronized"
                  }, 
                  "credentialsSecret": {
                    "required": [
                      "name", 
                      "namespace"
                    ], 
                    "type": "object", 
                    "description": "CredentialsSecret is a reference to a secret containing authentication details for the Keycloak server", 
                    "properties": {
                      "namespace": {
                        "type": "string", 
                        "description": "Namespace represents the namespace containing the secret"
                      }, 
                      "name": {
                        "type": "string", 
                        "description": "Name represents the name of the secret"
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "Key represents the specific key to reference from the secret"
                      }
                    }
                  }
                }
              }
            }
          }, 
          "type": "array", 
          "description": "List of Providers that can be mounted by containers belonging to the pod."
        }
      }
    }, 
    "apiVersion": {
      "type": "string", 
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
    }, 
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta_v2"
    }
  }
}